#include <avr/io.h>
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>

#include "LCDI2C.h"

#ifndef _BV
#define _BV(bit)        (1<<(bit))
#endif
#ifndef sbi
#define sbi(reg,bit)    reg |= (_BV(bit))
#endif

#ifndef cbi
#define cbi(reg,bit)    reg &= ~(_BV(bit))
#endif

#ifndef tbi
#define tbi(reg,bit)    reg ^= (_BV(bit))
#endif

#define BAUD 9600
#define BAUDDIVIDER ((F_CPU)/(BAUD*16UL)-1)

void USART_Init() {
    // Konfiguracja prędkości transmisji
    UBRR0 = 52;

    // Rozmiar danych: 8 bitów
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);

    // Brak bitu parzystości
    cbi(UCSR0C, UPM01);
    cbi(UCSR0C, UPM00);

    // 1 bit stopu
    cbi(UCSR0C, USBS0);

    // Włączenie nadajnika i odbiornika
    sbi(UCSR0B, RXEN0);
    sbi(UCSR0B, TXEN0);
}

void USART_SendByte(uint8_t data) {
    while (!(UCSR0A & (1 << UDRE0)));
    UDR0 = data;
}

void USART_SendString(char* str) {
    while (*str) {
        USART_SendByte(*str++);
    }
}

uint8_t USART_ReceiveByte() {
    while (!(UCSR0A & (1 << RXC0)));
    return UDR0;
}

void ADCinit(){
  // Ustawienie napięcia AVCC
  sbi(ADMUX, REFS0);
  cbi(ADMUX, REFS1);
  

  //Ustawienie podzielnika częstotliwosci na 128; 16 MHz/128 = 125000 Hz
  sbi(ADCSRA, ADPS0);
  sbi(ADCSRA, ADPS1);
  sbi(ADCSRA, ADPS2);

  //Uruchomienie ukladu przetwornika
  sbi(ADCSRA, ADEN);

  //Ustawienie kanalu ADC0
  cbi(ADMUX, MUX0);
  cbi(ADMUX, MUX1);
  cbi(ADMUX, MUX2);
  cbi(ADMUX, MUX3);
}

uint16_t ADC_10bit(){
  sbi(ADCSRA, ADSC);
  loop_until_bit_is_clear(ADCSRA, ADSC);
  return ADC;
}


int main() {
  //_delay_ms(100);
  ADCinit();
  USART_Init();
  int counter = 0;
  
  uint8_t i = 0;
  char text[20];
  char text2[20];
  char message[20];

  DDRB = 0x00;
  PORTB = 0x0F;
  DDRD = 0xFF;
  while (1) {
    float pomiar = ADC_10bit();
    uint16_t pomiar_wartosc = ADC_10bit();
    sprintf(text, "%d", pomiar_wartosc);
    //float pomiar_v = pomiar*5/1024;
    char volt[10];
    //dtostrf(pomiar_v, 5, 2, volt); 
    USART_SendString(text);
    USART_SendString(" ");
    sprintf(text2, "%s", volt);
    USART_SendString(text2);
    USART_SendString(" ");
    USART_SendString("\n");
    _delay_ms(150);
  }
}